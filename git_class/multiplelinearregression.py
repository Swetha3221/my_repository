# Multiple Linear Regression 

'''
Problem Statement:

A company wants to predict the profit generated by its branches based on various expenditures 
and the state of operation. The goal is to build a Multiple Linear Regression model that can:

1. Predict the profit for its existing branches based on their R&D spend, administration costs, 
marketing spend, and state of operation.


The company wants to:
Predict profits for its existing branches based on their expenditures and location (state).


Deliverables:

1. A trained Multiple Linear Regression model to predict profit.
2. A method to preprocess existing data and make predictions for the company's branches.


Challenges to Address:
1. Encoding the state variable (categorical) for model compatibility.
2. Evaluating the model’s performance using metrics like R² score.
 '''

# Importing the libraries
import numpy as np
import pandas as pd

# Importing the dataset
dataset = pd.read_csv(r"C:\Users\chandra\Downloads\50_Startups.csv")
dataset.isnull().sum()

#Extracting the independent and dependent variables
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values


# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, 
                                test_size = 0.2, random_state = 0)

# Encoding categorical data
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [3])], remainder='passthrough')
X_train = np.array(ct.fit_transform(X_train))
X_test = np.array(ct.transform(X_test))


#Feature scaling

# Using StandardScaler
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train[:, 3:] = sc.fit_transform(X_train[:, 3:])
X_test[:, 3:] = sc.transform(X_test[:, 3:])


# Training the Multiple Linear Regression model on the Training set
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

#Checking model accuracy with training data
regressor.score(X_train, y_train)

# Predicting the Test set results
y_pred = regressor.predict(X_test)

#Checking the accuracy with actual and predicted values (r2 method)
from sklearn.metrics import r2_score
r2_score(y_test,y_pred)

#------------------------------------------------------------------------------
# Making prediction for new data

# New data for prediction 
new_data = [[160000, 130000, 300000, 'Florida']]  

# Ensure the new data has the same structure as training data
new_data_transformed = np.array(ct.transform(new_data))

# Predict profit
predicted_profit = regressor.predict(new_data_transformed)
print(f"Predicted Profit: {predicted_profit[0]:.2f}/-")

'''
# Output
Predicted Profit: 180607.64/-
'''



